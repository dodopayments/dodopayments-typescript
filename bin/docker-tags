#!/usr/bin/env bash

set -euo pipefail

# This script determines which Docker tags to use based on the version
# It outputs a newline-separated list of tags

# Get version from mcp-server package.json
if [ -f "packages/mcp-server/package.json" ]; then
  VERSION="$(jq -r -e '.version' ./packages/mcp-server/package.json)"
else
  echo "ERROR: Could not determine version from packages/mcp-server/package.json" >&2
  exit 1
fi

# Check if current version is pre-release (e.g. alpha / beta / rc)
CURRENT_IS_PRERELEASE=false
PRERELEASE_TAG=""
if [[ "$VERSION" =~ -([a-zA-Z]+) ]]; then
  CURRENT_IS_PRERELEASE=true
  PRERELEASE_TAG="${BASH_REMATCH[1]}"
fi

# Check if there's any stable release in GHCR
# This matches the npm logic: check if ANY stable version exists
GHCR_REPO="${GHCR_REPO:-dodopayments}"
GHCR_IMAGE="${GHCR_IMAGE:-mcp}"
HAS_STABLE_RELEASE=false

# Try to fetch tags from GHCR via GitHub API
# We'll try both org and user endpoints since we don't know which one it is
for ENDPOINT_TYPE in "orgs" "users"; do
  RESPONSE=$(curl -s --max-time 30 \
    -H "Accept: application/vnd.github.v3+json" \
    "https://api.github.com/${ENDPOINT_TYPE}/${GHCR_REPO}/packages/container/${GHCR_IMAGE}/versions?per_page=100")

  # If we get a valid response (not 404), process it
  if echo "$RESPONSE" | jq -e 'if type == "array" then true else false end' >/dev/null 2>&1; then
    # Check if any tags are stable versions (no pre-release suffix)
    STABLE_TAGS=$(echo "$RESPONSE" | jq -r '.[].metadata.container.tags[]? | select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))' 2>/dev/null || true)
    if [ -n "$STABLE_TAGS" ]; then
      HAS_STABLE_RELEASE=true
    fi
    break
  fi
done

# If API calls failed or returned errors, assume no stable release exists
# This allows the script to work even without authentication or if the package doesn't exist yet
if [ "$HAS_STABLE_RELEASE" = false ]; then
  # Also try anonymous access to GHCR registry directly
  RESPONSE=$(curl -s --max-time 30 "https://ghcr.io/v2/${GHCR_REPO}/${GHCR_IMAGE}/tags/list" 2>/dev/null || true)
  if echo "$RESPONSE" | jq -e '.tags' >/dev/null 2>&1; then
    STABLE_TAGS=$(echo "$RESPONSE" | jq -r '.tags[]? | select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))' 2>/dev/null || true)
    if [ -n "$STABLE_TAGS" ]; then
      HAS_STABLE_RELEASE=true
    fi
  fi
fi

# Output tags based on the logic (matching npm):
# 1. Always output the exact version tag
echo "$VERSION"

# 2. Use pre-release tag (alpha/beta) if there's already a stable release and we're publishing a pre-release
# Otherwise use 'latest'
if $CURRENT_IS_PRERELEASE && $HAS_STABLE_RELEASE; then
  # Only tag with pre-release type, not latest
  echo "$PRERELEASE_TAG"
else
  # Tag as latest (either it's a stable release, or it's a pre-release but no stable exists yet)
  echo "latest"

  # For stable releases, also add major and major.minor tags
  if ! $CURRENT_IS_PRERELEASE && [[ "$VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
    MAJOR="${BASH_REMATCH[1]}"
    MINOR="${BASH_REMATCH[2]}"
    echo "$MAJOR"
    echo "$MAJOR.$MINOR"
  fi
fi
